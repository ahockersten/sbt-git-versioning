############################################################################################################
# Tests creating a hotfix on a separate branch
# and somone needs to cut a release to push to integration.
# see readme.

# Init the repo
$ exec git init
$ touch bar.txt
$ exec git add .
$ exec git commit -am 'Initial commit.'
> setRelease patch
> reload
> assertVersion 0.0.1
> clearRelease
$ exec git tag v0.0.1

# do a lot of work with commits for each change
$ exec awk 'BEGIN{ split("fubar",a,""); for(i=1;i<=length(a);i++) {print a[i] >> "bar.txt"; system("git add ."); system("git commit -am \"letter: "a[i]"\"")} }'

# Someone is preparing a release and needs a stable artifact for integration
> setRelease major
> reload
> assertVersion 1.0.0
> clearRelease
$ exec git tag v1.0.0

# Uh oh we need to hotfix v0.0.1 checkout hotfix branch
$ exec git checkout -b hotfix v0.0.1 

# do a little work
$ exec awk 'BEGIN{ a="fubar"; {print a >> "foo.txt"; system("git add \."); system("git commit -am \"letter: "a"\"")} }'

# Fake a new release 
> setRelease patch
> printVersion
> printVer
> reload
> printVersion
> printVer
> assertVersion 0.0.2
> clearRelease
$ exec git tag v0.0.2 -m 'v0.0.2'

# checkout master tonight
$ exec git checkout master

# merge hotfix into master with PR
$ exec git merge --no-ff hotfix -m "Merge branch 'hotfix' via fake PR"
> reload
> assertVersion 1.0.1-1-<hash>-SNAPSHOT
