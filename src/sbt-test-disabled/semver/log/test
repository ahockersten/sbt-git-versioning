############################################################################################################
# These tests are designed to exercise the SemVerPlugin in (hopefully) real world scenarios.

# These tests are executed against the logs that SemVerPlugin produces because I found it to be the most
# reliable way to check the behavior. In generally I agree with the "best practices" that testing against
# logs is a bad idea because logs are unstable and don't really verifying the actual behavior (logs are a
# side-effect that hopefully reflects with the behavior.) In this case I think using the logs is a good
# strategy:
# - The "log" here is the REPL output which is more a UI then a traditional UI. Developers directly rely
# on the accuracy of the REPL so I think its reasonable to assert against.
# - I want to ensure that the information that SemVerPlugin prints out is accurate and complete for the
# developer. I consider it a FAIL if the SemVerPlugin works perfectly but doesn't accurately communicate
# that to the developer.
# - SemVerPlugin overrides some of the core SBT tasks. Overriding tasks is difficult and easy to get
# wrong -- what look like imperative function definitions (the "task := { ... }" stuff) are really macros
# that allow SBT to execute any referenced tasks in parallel. Its deceptively easy to attempt to override
# task "xxx" to check a pre-condition that might halt *before* executing "xxx", and end up with an
# override that fails when your pre-condition isn't met but "xxx" is still executed. Checking for the
# absence of the log output for "xxx" is a good way to be sure "xxx" didn't execute unintentionally.

# Notes:
# - 'version' must be defined as 'version in ThisBuild' since it is defined by GitVersioningPlugin in the
# buildSettings scope ({.}/version) as opposed to the project settings scope.
# - The "reload" task is should be run before tasks many tasks to ensure that any settings changed by the
# previous tests are removed. Sometimes, when all tests change the same setting (or no settings) "reload"
# can be run just once at the start to safe a little time. If you aren't sure, run "reload".
# - You must put "reload" BEFORE "startTest" -- otherwise "reload" will clear the work done by "startTest"

############################################################################################################
# Git Setup

# Init the repo
$ exec git init
$ exec git add .
$ exec git commit -am "Initial commit"
# Tagging at 1.0.0 because SemVer will ignore check pre-releases (by default)
$ exec git tag v1.0.0 -m "Initial Tag"

# Publish 1.0.0 so we have something to check against during compile and test
> applyChange original
> reload
> startTest initial_publish
# Disable checking so this does not fail trying to find the artifact for the previous tag, which we never published
> '; set semVerCheckOnCompile := false ; set semVerCheckOnPublish := false'
> publishLocal
> grepLog """published log_2\\.11 to .*?/com.rallyhealth.test.scripted/log_2\\.11/1\\.0\\.0/"""

############################################################################################################
# Sanity Tests

> reload
> startTest sanity_load_plugin
> plugins
> searchLog not "UNRESOLVED DEPENDENCIES"
> searchLog not "[SemVer]"
> searchLog "com.rallyhealth.sbt.semver.SemVerPlugin"

> reload
> startTest sanity_update
> 'set semVerLimit := ""'
> update
> searchLog not "UNRESOLVED DEPENDENCIES"
> searchLog not "[SemVer]"

> reload
> startTest sanity_clean
> 'set semVerLimit := ""'
> clean
> searchLog not "[SemVer]"

> reload
> startTest sanity_compile_with_default_limit
> compile
> assertAborted

> applyChange original
> reload

> startTest sanity_compile_original
> 'set semVerLimit := ""'
> compile
> assertAborted

> startTest sanity_test_original
> 'set semVerLimit := ""'
> test
> assertAborted

> applyChange patch
> reload

> startTest sanity_compile_patch
> 'set semVerLimit := ""'
> compile
> assertDisabled

> startTest sanity_test_patch
> 'set semVerLimit := ""'
> test
> assertDisabled

############################################################################################################
# Configuration Errors

> reload

> startTest config_invalid_limit_version
> 'set semVerLimit := "WHATEVER"'
-> compile
> assertConfigError

> startTest config_dirty_limit_version
> 'set semVerLimit := "1.0.0-dirty-SNAPSHOT"'
-> compile
> assertConfigError

############################################################################################################
# Configuration Checks

> applyChange patch
> reload

> startTest config_compile_extreme_limit_major
> 'set semVerLimit := "999.999.999"'
> compile
> assertAborted

> startTest config_compile_extreme_limit_minor
> 'set semVerLimit := "1.999.999"'
> compile
> assertPassed patch

> startTest config_compile_extreme_limit_patch
> 'set semVerLimit := "1.0.999"'
> compile
> assertPassed patch

> startTest config_publish_extreme_limit_major
> 'set semVerLimit := "999.999.999"'
> publishLocal
> assertAborted
> grepLog """published log_2\\.11 to .*?/com.rallyhealth.test.scripted/log_2\\.11/1\\.0\\.0-dirty-SNAPSHOT/"""

> startTest config_publish_extreme_limit_minor
> 'set semVerLimit := "1.999.999"'
> publishLocal
> assertPassed patch
> grepLog """published log_2\\.11 to .*?/com.rallyhealth.test.scripted/log_2\\.11/1\\.0\\.0-dirty-SNAPSHOT/"""

> startTest config_publish_extreme_limit_patch
> 'set semVerLimit := "1.0.999"'
> publishLocal
> assertPassed patch
> grepLog """published log_2\\.11 to .*?/com.rallyhealth.test.scripted/log_2\\.11/1\\.0\\.0-dirty-SNAPSHOT/"""

############################################################################################################
# Disabled SemVer Checks

> applyChange minor

> reload
> startTest disable_semver_check_compile
> '; set semVerCheckOnCompile := false ; set semVerLimit := ""'
> compile
> searchLog not "[SemVer]"

> reload
> startTest disable_semver_check_test
> '; set semVerCheckOnTest := false ; set semVerLimit := ""'
> test
> searchLog not "[SemVer]"

> reload
> startTest disable_semver_check_publish
> '; set semVerCheckOnPublish := false ; set semVerLimit := ""'
> publishLocal
> searchLog not "[SemVer]"
> grepLog """published log_2\\.11 to .*?/com.rallyhealth.test.scripted/log_2\\.11/1\\.0\\.0-dirty-SNAPSHOT/"""

###########################################################################################################
# Compile Dirty Patch

> applyChange patch
> reload

> startTest compile_dirty_patch_no_limit
> 'set semVerLimit := ""'
> compile
> assertDisabled

> startTest compile_dirty_patch_equal_limit
> 'set semVerLimit := "1.0.0"'
-> compile
> assertConfigError

> startTest compile_dirty_patch_under_limit_patch
> 'set semVerLimit := "1.0.1"'
> compile
> assertPassed patch

> startTest compile_dirty_patch_under_limit_minor
> 'set semVerLimit := "1.1.0"'
> compile
> assertPassed patch

> startTest compile_dirty_patch_under_limit_major
> 'set semVerLimit := "2.0.0"'
> compile
> assertAborted

###########################################################################################################
# Compile Patch Snapshot

> applyChange patch
$ exec git commit -am "Patch change"
> reload

> startTest compile_snapshot_patch_no_limit
> 'set semVerLimit := ""'
> compile
> assertDisabled

> startTest compile_snapshot_patch_equal_limit
> 'set semVerLimit := "1.0.0"'
-> compile
> assertConfigError

> startTest compile_snapshot_patch_under_limit_patch
> 'set semVerLimit := "1.0.1"'
> compile
> assertPassed patch

> startTest compile_snapshot_patch_under_limit_minor
> 'set semVerLimit := "1.1.0"'
> compile
> assertPassed patch

> startTest compile_snapshot_patch_under_limit_major
> 'set semVerLimit := "2.0.0"'
> compile
> assertAborted

###########################################################################################################
# Compile Patch Release AFTER TAGGING

$ exec git tag v1.0.1 -m "Patch tag"
> reload

> startTest compile_release_after_tag_patch_no_limit
> 'set semVerLimit := ""'
> compile
> assertPassed patch

> startTest compile_release_after_tag_patch_equal_limit
> 'set semVerLimit := "1.0.0"'
-> compile
> assertConfigError

> startTest compile_release_after_tag_patch_under_limit_patch
> 'set semVerLimit := "1.0.1"'
> compile
> assertPassed patch

> startTest compile_release_after_tag_patch_under_limit_minor
> 'set semVerLimit := "1.1.0"'
> compile
> assertPassed patch

> startTest compile_release_after_tag_patch_under_limit_major
> 'set semVerLimit := "2.0.0"'
> compile
> assertPassed patch

$ exec git tag -d v1.0.1
$ exec git reset --hard HEAD~1

###########################################################################################################
# Compile Dirty Minor

> applyChange minor
> reload

> startTest compile_dirty_minor_no_limit
> 'set semVerLimit := ""'
> compile
> assertDisabled

> startTest compile_dirty_minor_equal_limit
> 'set semVerLimit := "1.0.0"'
-> compile
> assertConfigError

> startTest compile_dirty_minor_under_limit_patch
> 'set semVerLimit := "1.0.1"'
-> compile
> assertFailed minor

> startTest compile_dirty_minor_under_limit_minor
> 'set semVerLimit := "1.1.0"'
> compile
> assertPassed minor

> startTest compile_dirty_minor_under_limit_major
> 'set semVerLimit := "2.0.0"'
> compile
> assertAborted

###########################################################################################################
# Compile Minor Snapshot

> applyChange minor
$ exec git commit -am "Minor change"
> reload

> startTest compile_snapshot_minor_no_limit
> 'set semVerLimit := ""'
> compile
> assertDisabled

> startTest compile_snapshot_minor_equal_limit
> 'set semVerLimit := "1.0.0"'
-> compile
> assertConfigError

> startTest compile_snapshot_minor_under_limit_patch
> 'set semVerLimit := "1.0.1"'
-> compile
> assertFailed minor

> startTest compile_snapshot_minor_under_limit_minor
> 'set semVerLimit := "1.1.0"'
> compile
> assertPassed minor

> startTest compile_snapshot_minor_under_limit_major
> 'set semVerLimit := "2.0.0"'
> compile
> assertAborted

###########################################################################################################
# Compile Minor Release AFTER TAGGING

$ exec git tag v1.1.0 -m "Minor tag"
> reload

> startTest compile_release_after_tag_minor_no_limit
> 'set semVerLimit := ""'
> compile
> assertPassed minor

> startTest compile_release_after_tag_minor_equal_limit
> 'set semVerLimit := "1.0.0"'
-> compile
> assertConfigError

> startTest compile_release_after_tag_minor_under_limit_patch
> 'set semVerLimit := "1.0.1"'
-> compile
> assertConfigError

> startTest compile_release_after_tag_minor_under_limit_minor
> 'set semVerLimit := "1.1.0"'
> compile
> assertPassed minor

> startTest compile_release_after_tag_minor_under_limit_major
> 'set semVerLimit := "2.0.0"'
> compile
> assertPassed minor

$ exec git tag -d v1.1.0
$ exec git reset --hard HEAD~1

###########################################################################################################
# Compile Dirty Major

> applyChange major
> reload

> startTest compile_dirty_major_no_limit
> 'set semVerLimit := ""'
> compile
> assertDisabled

> startTest compile_dirty_major_equal_limit
> 'set semVerLimit := "1.0.0"'
-> compile
> assertConfigError

> startTest compile_dirty_major_under_limit_patch
> 'set semVerLimit := "1.0.1"'
-> compile
> assertFailed major

> startTest compile_dirty_major_under_limit_minor
> 'set semVerLimit := "1.1.0"'
-> compile
> assertFailed major

> startTest compile_dirty_major_under_limit_major
> 'set semVerLimit := "2.0.0"'
> compile
> assertAborted

###########################################################################################################
# Compile Major Snapshot

> applyChange major
$ exec git commit -am "Major change"
> reload

> startTest compile_snapshot_major_no_limit
> 'set semVerLimit := ""'
> compile
> assertDisabled

> startTest compile_snapshot_major_equal_limit
> 'set semVerLimit := "1.0.0"'
-> compile
> assertConfigError

> startTest compile_snapshot_major_under_limit_patch
> 'set semVerLimit := "1.0.1"'
-> compile
> assertFailed major

> startTest compile_snapshot_major_under_limit_minor
> 'set semVerLimit := "1.1.0"'
-> compile
> assertFailed major

> startTest compile_snapshot_major_under_limit_major
> 'set semVerLimit := "2.0.0"'
> compile
> assertAborted

###########################################################################################################
# Compile Major Release AFTER TAGGING

$ exec git tag v2.0.0 -m "Major tag"
> reload

> startTest compile_release_after_tag_major_no_limit
> 'set semVerLimit := ""'
> compile
> assertAborted

> startTest compile_release_after_tag_major_equal_limit
> 'set semVerLimit := "1.0.0"'
-> compile
> assertConfigError

> startTest compile_release_after_tag_major_under_limit_patch
> 'set semVerLimit := "1.0.1"'
-> compile
> assertConfigError

> startTest compile_release_after_tag_major_under_limit_minor
> 'set semVerLimit := "1.1.0"'
-> compile
> assertConfigError

> startTest compile_release_after_tag_major_under_limit_major
> 'set semVerLimit := "2.0.0"'
> compile
> assertAborted

$ exec git tag -d v2.0.0
$ exec git reset --hard HEAD~1

###########################################################################################################
# Publish Patch Dirty

> applyChange patch
> reload

> startTest publish_dirty_patch_no_limit
> 'set semVerLimit := ""'
> publishLocal
> assertDisabled
> grepLog """published log_2\\.11 to .*?/com.rallyhealth.test.scripted/log_2\\.11/1\\.0\\.0-dirty-SNAPSHOT/"""

> startTest publish_dirty_patch_good_limit
> 'set semVerLimit := "1.0.1"'
> publishLocal
> assertPassed patch
> grepLog """published log_2\\.11 to .*?/com.rallyhealth.test.scripted/log_2\\.11/1\\.0\\.0-dirty-SNAPSHOT/"""

> startTest publish_dirty_patch_bad_limit
> 'set semVerLimit := "1.0.0"'
-> publishLocal
> assertConfigError

###########################################################################################################
# Publish Patch Snapshots

$ exec git commit -am "Patch commit"

> reload
> startTest publish_snapshot_patch_no_limit
> 'set semVerLimit := ""'
> publishLocal
> assertDisabled
> grepLog """published log_2\\.11 to .*?/com.rallyhealth.test.scripted/log_2\\.11/1\\.0\\.1-1-[0-9a-f]{7,}-SNAPSHOT/"""

> reload
> startTest publish_snapshot_patch_good_limit
> 'set semVerLimit := "1.0.1"'
> publishLocal
> assertPassed patch
> grepLog """published log_2\\.11 to .*?/com.rallyhealth.test.scripted/log_2\\.11/1\\.0\\.1-1-[0-9a-f]{7,}-SNAPSHOT/"""

> reload
> startTest publish_snapshot_patch_bad_limit
> 'set semVerLimit := "1.0.0"'
-> publishLocal
> assertConfigError

###########################################################################################################
# Publish Patch Releases BEFORE Tagging

> reload
> startTest publish_release_before_tag_patch_no_limit_bad_override
> '; set semVerLimit := "" ; set version in ThisBuild := "1.0.0"'
-> publishLocal
# This is not an assertConfigError. It's an error because we're attempting to publish at the same version as a previous version.

> reload
> startTest publish_release_before_tag_patch_no_limit_good_override
> '; set semVerLimit := "" ; set version in ThisBuild := "1.0.1"'
> publishLocal
> assertPassed patch
> grepLog """published log_2\\.11 to .*?/com.rallyhealth.test.scripted/log_2\\.11/1\\.0\\.1/"""

> reload
> startTest publish_release_before_tag_patch_good_limit_bad_override
> '; set semVerLimit := "1.0.1" ; set version in ThisBuild := "1.0.0"'
-> publishLocal
# This is not an assertConfigError. It's an error because we're attempting to publish at the same version as a previous version.

> reload
> startTest publish_release_before_tag_patch_bad_limit_good_override
> ';set semVerLimit := "1.0.0" ; set version in ThisBuild := "1.0.1"'
-> publishLocal
> assertConfigError

> reload
> startTest publish_release_before_tag_patch_as_patch
> '; set semVerLimit := "2.0.0" ; set version in ThisBuild := "1.0.1"'
> publishLocal
> assertPassed patch
> grepLog """published log_2\\.11 to .*?/com.rallyhealth.test.scripted/log_2\\.11/1\\.0\\.1/"""

> reload
> startTest publish_release_before_tag_patch_as_minor
> '; set semVerLimit := "2.0.0" ; set version in ThisBuild := "1.1.0"'
> publishLocal
> assertPassed patch
> grepLog """published log_2\\.11 to .*?/com.rallyhealth.test.scripted/log_2\\.11/1\\.1\\.0/"""

> reload
> startTest publish_release_before_tag_patch_as_major
> '; set semVerLimit := "2.0.0" ; set version in ThisBuild := "2.0.0"'
> publishLocal
> assertAborted
> grepLog """published log_2\\.11 to .*?/com.rallyhealth.test.scripted/log_2\\.11/2\\.0\\.0/"""

###########################################################################################################
# Publish Patch Releases AFTER Tagging

$ exec git tag "v1.0.1" -m "Patch tag"

> reload
> startTest publish_release_after_patch_no_limit_bad_override
> '; set semVerLimit := "" ; set version in ThisBuild := "1.0.0"'
-> publishLocal
# This is not an assertConfigError. It's an error because we're attempting to publish at the same version as a previous version.

> reload
> startTest publish_release_after_patch_no_limit_good_override
> '; set semVerLimit := "" ; set version in ThisBuild := "1.0.1"'
> publishLocal
> assertPassed patch
> grepLog """published log_2\\.11 to .*?/com.rallyhealth.test.scripted/log_2\\.11/1\\.0\\.1/"""

> reload
> startTest publish_release_after_patch_no_limit_no_override
> 'set semVerLimit := ""'
> publishLocal
> assertPassed patch
> grepLog """published log_2\\.11 to .*?/com.rallyhealth.test.scripted/log_2\\.11/1\\.0\\.1/"""

> reload
> startTest publish_release_after_patch_good_limit_bad_override
> '; set semVerLimit := "1.0.1" ; set version in ThisBuild := "1.0.0"'
-> publishLocal
# This is not an assertConfigError. It's an error because we're attempting to publish at the same/earlier version as a previous version.

> reload
> startTest publish_release_after_patch_bad_limit_good_override
> ';set semVerLimit := "1.0.0" ; set version in ThisBuild := "1.0.1"'
-> publishLocal
> assertConfigError

> reload
> startTest publish_release_after_patch_as_patch
> '; set semVerLimit := "2.0.0" ; set version in ThisBuild := "1.0.1"'
> publishLocal
> assertPassed patch
> grepLog """published log_2\\.11 to .*?/com.rallyhealth.test.scripted/log_2\\.11/1\\.0\\.1/"""

> reload
> startTest publish_release_after_patch_as_minor
> '; set semVerLimit := "2.0.0" ; set version in ThisBuild := "1.1.0"'
> publishLocal
> assertPassed patch
> grepLog """published log_2\\.11 to .*?/com.rallyhealth.test.scripted/log_2\\.11/1\\.1\\.0/"""

> reload
> startTest publish_release_after_patch_as_major
> '; set semVerLimit := "2.0.0" ; set version in ThisBuild := "2.0.0"'
> publishLocal
> assertAborted
> grepLog """published log_2\\.11 to .*?/com.rallyhealth.test.scripted/log_2\\.11/2\\.0\\.0/"""

# Remove "Patch commit"
$ exec git tag -d v1.0.1
$ exec git reset --hard HEAD~1

###########################################################################################################
# Publish Minor Dirty

> applyChange minor
> reload

> startTest publish_dirty_minor_no_limit
> 'set semVerLimit := ""'
> publishLocal
> assertDisabled
> grepLog """published log_2\\.11 to .*?/com.rallyhealth.test.scripted/log_2\\.11/1\\.0\\.0-dirty-SNAPSHOT/"""

> startTest publish_dirty_minor_good_limit
> 'set semVerLimit := "1.1.0"'
> publishLocal
> assertPassed minor
> grepLog """published log_2\\.11 to .*?/com.rallyhealth.test.scripted/log_2\\.11/1\\.0\\.0-dirty-SNAPSHOT/"""

> startTest publish_dirty_minor_bad_limit
> 'set semVerLimit := "1.0.1"'
-> publishLocal
> assertFailed minor

###########################################################################################################
# Publish Minor Snapshot

$ exec git commit -am "Minor commit"
> reload

> startTest publish_snapshot_minor_no_limit
> 'set semVerLimit := ""'
> publishLocal
> assertDisabled
> grepLog """published log_2\\.11 to .*?/com.rallyhealth.test.scripted/log_2\\.11/1\\.0\\.1-1-[0-9a-f]{7,}-SNAPSHOT/"""

> startTest publish_snapshot_minor_good_limit
> 'set semVerLimit := "1.1.0"'
> publishLocal
> assertPassed minor
> grepLog """published log_2\\.11 to .*?/com.rallyhealth.test.scripted/log_2\\.11/1\\.0\\.1-1-[0-9a-f]{7,}-SNAPSHOT/"""

> startTest publish_snapshot_minor_bad_limit
> 'set semVerLimit := "1.0.1"'
-> publishLocal
> assertFailed minor

###########################################################################################################
# Publish Minor Releases BEFORE Tagging

> reload
> startTest publish_release_before_tag_minor_no_limit_bad_override
> '; set semVerLimit := "" ; set version in ThisBuild := "1.0.1"'
-> publishLocal
> assertFailed minor

> reload
> startTest publish_release_before_tag_minor_no_limit_good_override
> '; set semVerLimit := "" ; set version in ThisBuild := "1.1.0"'
> publishLocal
> assertPassed minor
> grepLog """published log_2\\.11 to .*?/com.rallyhealth.test.scripted/log_2\\.11/1\\.1\\.0/"""

> reload
> startTest publish_release_before_tag_minor_good_limit_bad_override
> '; set semVerLimit := "2.0.0" ; set version in ThisBuild := "1.0.1"'
-> publishLocal
> assertFailed minor

> reload
> startTest publish_release_before_tag_minor_bad_limit_good_override
> '; set semVerLimit := "1.0.1" ; set version in ThisBuild := "1.1.0"'
-> publishLocal
> assertConfigError

> reload
> startTest publish_release_before_tag_minor_as_patch
> '; set semVerLimit := "2.0.0" ; set version in ThisBuild := "1.0.1"'
-> publishLocal
> assertFailed minor

> reload
> startTest publish_release_before_tag_minor_as_minor
> '; set semVerLimit := "2.0.0" ; set version in ThisBuild := "1.1.0"'
> publishLocal
> assertPassed minor
> grepLog """published log_2\\.11 to .*?/com.rallyhealth.test.scripted/log_2\\.11/1\\.1\\.0/"""

> reload
> startTest publish_release_before_tag_minor_as_major
> '; set semVerLimit := "2.0.0" ; set version in ThisBuild := "2.0.0"'
> publishLocal
> assertAborted
> grepLog """published log_2\\.11 to .*?/com.rallyhealth.test.scripted/log_2\\.11/2\\.0\\.0/"""

###########################################################################################################
# Publish Minor Releases AFTER Tagging

$ exec git tag "v1.1.0" -m "Minor tag"

> reload
> startTest publish_release_after_minor_no_limit_bad_override
> '; set semVerLimit := "" ; set version in ThisBuild := "1.0.1"'
-> publishLocal
# This is not an assertConfigError. It's an error because we're attempting to publish at the same/earlier version as a previous version.

> reload
> startTest publish_release_after_minor_no_limit_good_override
> '; set semVerLimit := "" ; set version in ThisBuild := "1.1.0"'
> publishLocal
> assertPassed minor
> grepLog """published log_2\\.11 to .*?/com.rallyhealth.test.scripted/log_2\\.11/1\\.1\\.0/"""

> reload
> startTest publish_release_after_minor_no_limit_no_override
> 'set semVerLimit := ""'
> publishLocal
> assertPassed minor
> grepLog """published log_2\\.11 to .*?/com.rallyhealth.test.scripted/log_2\\.11/1\\.1\\.0/"""

> reload
> startTest publish_release_after_minor_good_limit_bad_override
> '; set semVerLimit := "1.0.1" ; set version in ThisBuild := "1.0.0"'
-> publishLocal
# This is not an assertConfigError. It's an error because we're attempting to publish at the same/earlier version as a previous version.

> reload
> startTest publish_release_after_minor_bad_limit_good_override
> ';set semVerLimit := "1.0.0" ; set version in ThisBuild := "1.1.0"'
-> publishLocal
> assertConfigError

> reload
> startTest publish_release_after_minor_as_patch
> '; set semVerLimit := "2.0.0" ; set version in ThisBuild := "1.0.1"'
-> publishLocal
# This is not an assertConfigError. It's an error because we're attempting to publish at the same/earlier version as a previous version.

> reload
> startTest publish_release_after_minor_as_minor
> '; set semVerLimit := "2.0.0" ; set version in ThisBuild := "1.1.0"'
> publishLocal
> assertPassed minor
> grepLog """published log_2\\.11 to .*?/com.rallyhealth.test.scripted/log_2\\.11/1\\.1\\.0/"""

> reload
> startTest publish_release_after_minor_as_major
> '; set semVerLimit := "2.0.0" ; set version in ThisBuild := "2.0.0"'
> publishLocal
> assertAborted
> grepLog """published log_2\\.11 to .*?/com.rallyhealth.test.scripted/log_2\\.11/2\\.0\\.0/"""

# Remove "Minor commit"
$ exec git tag -d v1.1.0
$ exec git reset --hard HEAD~1

###########################################################################################################
# Publish Major Dirty

> applyChange major
> reload

> startTest publish_dirty_major_no_limit
> 'set semVerLimit := ""'
> publishLocal
> assertDisabled
> grepLog """published log_2\\.11 to .*?/com.rallyhealth.test.scripted/log_2\\.11/1\\.0\\.0-dirty-SNAPSHOT/"""

> startTest publish_dirty_major_good_limit
> 'set semVerLimit := "2.0.0"'
> publishLocal
> assertAborted
> grepLog """published log_2\\.11 to .*?/com.rallyhealth.test.scripted/log_2\\.11/1\\.0\\.0-dirty-SNAPSHOT/"""

> startTest publish_dirty_major_bad_limit
> 'set semVerLimit := "1.1.0"'
-> publishLocal
> assertFailed major

###########################################################################################################
# Publish Major Snapshot

$ exec git commit -am "Major commit"
> reload

> startTest publish_snapshot_major_no_limit
> 'set semVerLimit := ""'
> publishLocal
> assertDisabled
> grepLog """published log_2\\.11 to .*?/com.rallyhealth.test.scripted/log_2\\.11/1\\.0\\.1-1-[0-9a-f]{7,}-SNAPSHOT/"""

> startTest publish_snapshot_major_good_limit
> 'set semVerLimit := "2.0.0"'
> publishLocal
> assertAborted
> grepLog """published log_2\\.11 to .*?/com.rallyhealth.test.scripted/log_2\\.11/1\\.0\\.1-1-[0-9a-f]{7,}-SNAPSHOT/"""

> startTest publish_snapshot_major_bad_limit
> 'set semVerLimit := "1.1.0"'
-> publishLocal
> assertFailed major

###########################################################################################################
# Publish Major Releases BEFORE Tagging

> reload
> startTest publish_release_before_tag_major_no_limit_bad_override
> '; set semVerLimit := "" ; set version in ThisBuild := "1.1.0"'
-> publishLocal
> assertFailed major

> reload
> startTest publish_release_before_tag_major_no_limit_good_override
> '; set semVerLimit := "" ; set version in ThisBuild := "2.0.0"'
> publishLocal
> assertAborted
> grepLog """published log_2\\.11 to .*?/com.rallyhealth.test.scripted/log_2\\.11/2\\.0\\.0/"""

> reload
> startTest publish_release_before_tag_major_good_limit_bad_override
> '; set semVerLimit := "2.0.0" ; set version in ThisBuild := "1.1.0"'
-> publishLocal
> assertFailed major

> reload
> startTest publish_release_before_tag_major_bad_limit_good_override
> ';set semVerLimit := "1.1.0" ; set version in ThisBuild := "2.0.0"'
-> publishLocal
> assertConfigError

> reload
> startTest publish_release_before_tag_major_as_patch
> '; set semVerLimit := "2.0.0" ; set version in ThisBuild := "1.0.1"'
-> publishLocal
> assertFailed major

> reload
> startTest publish_release_before_tag_major_as_minor
> '; set semVerLimit := "2.0.0" ; set version in ThisBuild := "1.1.0"'
-> publishLocal
> assertFailed major

> reload
> startTest publish_release_before_tag_major_as_major
> '; set semVerLimit := "2.0.0" ; set version in ThisBuild := "2.0.0"'
> publishLocal
> assertAborted
> grepLog """published log_2\\.11 to .*?/com.rallyhealth.test.scripted/log_2\\.11/2\\.0\\.0/"""

###########################################################################################################
# Publish Major Releases AFTER Tagging

$ exec git tag "v2.0.0" -m "Major tag"

> reload
> startTest publish_release_after_major_no_limit_bad_override
> '; set semVerLimit := "" ; set version in ThisBuild := "1.1.0"'
-> publishLocal
# This is not an assertConfigError. It's an error because we're attempting to publish at the same/earlier version as a previous version.

> reload
> startTest publish_release_after_major_no_limit_good_override
> '; set semVerLimit := "" ; set version in ThisBuild := "2.0.0"'
> publishLocal
> assertAborted
> grepLog """published log_2\\.11 to .*?/com.rallyhealth.test.scripted/log_2\\.11/2\\.0\\.0/"""

> reload
> startTest publish_release_after_major_no_limit_no_override
> 'set semVerLimit := ""'
> publishLocal
> assertAborted
> grepLog """published log_2\\.11 to .*?/com.rallyhealth.test.scripted/log_2\\.11/2\\.0\\.0/"""

> reload
> startTest publish_release_after_major_good_limit_bad_override
> '; set semVerLimit := "1.0.1" ; set version in ThisBuild := "1.0.0"'
-> publishLocal
# This is not an assertConfigError. It's an error because we're attempting to publish at the same/earlier version as a previous version.

> reload
> startTest publish_release_after_major_bad_limit_good_override
> ';set semVerLimit := "1.0.0" ; set version in ThisBuild := "1.1.0"'
-> publishLocal
> assertConfigError

> reload
> startTest publish_release_after_major_as_patch
> '; set semVerLimit := "2.0.0" ; set version in ThisBuild := "1.0.1"'
-> publishLocal
# This is not an assertConfigError. It's an error because we're attempting to publish at the same/earlier version as a previous version.

> reload
> startTest publish_release_after_major_as_minor
> '; set semVerLimit := "2.0.0" ; set version in ThisBuild := "1.1.0"'
-> publishLocal
# This is not an assertConfigError. It's an error because we're attempting to publish at the same/earlier version as a previous version.

> reload
> startTest publish_release_after_major_as_major
> '; set semVerLimit := "2.0.0" ; set version in ThisBuild := "2.0.0"'
> publishLocal
> assertAborted
> grepLog """published log_2\\.11 to .*?/com.rallyhealth.test.scripted/log_2\\.11/2\\.0\\.0/"""

# Remove "Major commit"
$ exec git tag -d v2.0.0
$ exec git reset --hard HEAD~1

############################################################################################################
# Attempt to Publish Not Normalized Patch Versions

> applyChange patch
$ exec git commit -a -m "Patch commit"

> reload
> startTest not_normalized_compile_patch_with_limit
> '; set semVerLimit := "2.0.2"'
> compile
> assertAborted

> reload
> startTest not_normalized_publish_patch_no_limit
> '; set semVerLimit := ""; set version in ThisBuild := "2.0.2"'
-> publishLocal
> assertFailed "not normalized"

> reload
> startTest not_normalized_publish_patch_with_limit
> '; set semVerLimit := "9.9.9"; set version in ThisBuild := "2.0.2"'
-> publishLocal
> assertFailed "not normalized"

# Remove "Patch commit", add "Minor commit"
$ exec git reset --hard HEAD~1

############################################################################################################
# Attempt to Publish Not Normalized Minor Versions

> applyChange minor
$ exec git commit -a -m "Minor commit"

> reload
> startTest not_normalized_compile_minor_with_limit
> '; set semVerLimit := "2.2.0"'
> compile
> assertAborted

> reload
> startTest not_normalized_publish_minor_no_limit
> '; set semVerLimit := ""; set version in ThisBuild := "2.2.0"'
-> publishLocal
> assertFailed "not normalized"

> reload
> startTest not_normalized_publish_minor_with_limit
> '; set semVerLimit := "9.9.9"; set version in ThisBuild := "2.2.0"'
-> publishLocal
> assertFailed "not normalized"

# Remove "Minor commit", add "Major commit"
$ exec git reset --hard HEAD~1

############################################################################################################
# Attempt to Publish Not Normalized Major Versions

> applyChange major
$ exec git commit -a -m "Major commit"

> reload
> startTest not_normalized_compile_major_with_limit
> '; set semVerLimit := "4.0.0"'
> compile
> assertAborted

> reload
> startTest not_normalized_publish_major_no_limit
> '; set semVerLimit := ""; set version in ThisBuild := "4.0.0"'
-> publishLocal
> assertFailed "not normalized"

> reload
> startTest not_normalized_publish_major_with_limit
> '; set semVerLimit := "9.9.9"; set version in ThisBuild := "5.0.0"'
-> publishLocal
> assertFailed "not normalized"

# Remove "Major commit"
$ exec git reset --hard HEAD~1

> listTestNames
