###########################################################################################################
# Checks the "semVerEnforceAfterVersion" key. This is intended to be used when a new artifact (module) is
# added to a repository that has existing version tags. In that situation SemVer can't find the "old" version
# because it never existed -- the artifact is new.
# This is similar to "rename-artifact" test but allows dealing with PATCH and MINOR changes if you set
# "semVerEnforceAfterVersion".
###########################################################################################################

# Set up a git repo appease GitVersioningPlugin and tag first version.
$ exec git init
$ exec git add .
$ exec git commit -am 'Initial commit.'

# Add foo.txt (we will add bar.txt later to create a commit for publishing bar)
$ touch foo.txt
$ exec git add foo.txt
$ exec git commit -am 'Added Foo'
$ exec git tag v1.0.0

# Publish ONLY "foo" at 1.0.0
> reload
# startTest publish_foo_only
> foo/publishLocal

# Add bar.txt
$ touch bar.txt
$ exec git add bar.txt
$ exec git commit -am 'Added bar'

###########################################################################################################
# Publish without semVerEnforceAfterVersion

# Publish at 1.0.1
$ exec git tag v1.0.1
> reload

> foo/publishLocal

# startTest publish_v1_0_1_bar_without_semVerEnforceAfterVersion
-> bar/publishLocal

# foo 1.0.1 is published but future tests need it to be unpublished. Remove the tag so semver won't find it
$ exec git tag -d v1.0.1

# Publish at 1.1.0
$ exec git tag v1.1.0
> reload

# startTest publish_v1_1_0_foo_without_semVerEnforceAfterVersion
> foo/publishLocal

# startTest publish_v1_1_0_bar_without_semVerEnforceAfterVersion
-> bar/publishLocal

# foo 1.1.0 is published but future tests need it to be unpublished. Remove the tag so semver won't find it
$ exec git tag -d v1.1.0

# Publish at 2.0.0
$ exec git tag v2.0.0
> reload

# startTest publish_v2_0_0_foo_without_semVerEnforceAfterVersion
> foo/publishLocal

# startTest publish_v2_0_0_bar_without_semVerEnforceAfterVersion
> bar/publishLocal

# foo 2.0.0 is published but future tests need it to be unpublished. Remove the tag so semver won't find it
$ exec git tag -d v2.0.0

###########################################################################################################
# Publish with semVerEnforceAfterVersion=1.1.0

# Publish at 1.0.1
$ exec git tag v1.0.1
> reload

# startTest publish_v1_0_1_foo_with_semVerEnforceAfterVersion
> foo/publishLocal

# startTest publish_v1_0_1_bar_with_semVerEnforceAfterVersion
> 'set semVerEnforceAfterVersion in bar := Some("1.1.0")'
> bar/publishLocal

# foo and bar 1.0.1 is published but future tests need it to be unpublished. Remove the tag so semver won't find it
$ exec git tag -d v1.0.1

# Publish at 1.1.0
$ exec git tag v1.1.0
> reload

# startTest publish_v1_1_0_foo_with_semVerEnforceAfterVersion
> foo/publishLocal

# startTest publish_v1_1_0_bar_with_semVerEnforceAfterVersion
> 'set semVerEnforceAfterVersion in bar := Some("1.1.0")'
> bar/publishLocal

# foo and bar 1.1.0 is published but future tests need it to be unpublished. Remove the tag so semver won'tt find it
$ exec git tag -d v1.1.0

# Publish at 2.0.0
$ exec git tag v2.0.0
> reload

# startTest publish_v2_0_0_foo_with_semVerEnforceAfterVersion
> foo/publishLocal

# startTest publish_v2_0_0_bar_with_semVerEnforceAfterVersion
> 'set semVerEnforceAfterVersion in bar := Some("1.1.0")'
> bar/publishLocal
