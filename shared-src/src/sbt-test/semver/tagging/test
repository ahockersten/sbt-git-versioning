###########################################################################################################
# Uses "tag then publish" workflow.
###########################################################################################################

# Set up a git repo appease GitVersioningPlugin and tag first version.
$ exec git init
$ exec git add .
$ exec git commit -am 'Initial commit.'
$ exec git tag v1.0.1

# Should pass because there's no previous version
> semVerCheck

# Publish the first version so that SemVer will have a baseline to compare to.
> publishLocal

# Introduce minor change.
$ copy-file srcTemplates/minorChange/Thing.scala src/main/scala/Thing.scala
$ exec git add .
$ exec git commit -am 'Minor change'

# Reload to pick up new version change.
> reload

# Running semver against the minor addition should pass since IT'S A SNAPSHOT
> assertVersion 1.0.2-1-<hash>-SNAPSHOT
> semVerCheck

# And all tasks should pass with semVerCheck.
> compile
> test
> publishLocal

# Release the minor version.
$ exec git tag v1.1.0
# Version change. Reload.
> reload
> assertVersion 1.1.0

# Still good.
> semVerCheck
> publishLocal

# Introduce major change.
$ copy-file srcTemplates/majorChange/Thing.scala src/main/scala/Thing.scala
$ exec git add .
$ exec git commit -am 'Major change'
> reload

# SemVer should fail given because it EXCEEDS THE LIMIT and/or DOES NOT HAVE A TAG
> assertVersion 1.1.1-1-<hash>-SNAPSHOT
-> semVerCheck

# We can use gitVersioningSnapshotLowerBound to nudge it to 2.0.0-...-SNAPSHOT.
# Normally this would be in the build.sbt.
> 'set gitVersioningSnapshotLowerBound in ThisBuild := "2.0.0"'
# All good for a SNAPSHOT.
> assertVersion 2.0.0-1-<hash>-SNAPSHOT
> semVerCheck

# Release major version
$ exec git tag v2.0.0
> reload
> assertVersion 2.0.0

# All good for a release.
> semVerCheck
